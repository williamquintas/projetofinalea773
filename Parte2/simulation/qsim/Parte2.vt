// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2018 22:55:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LinhaDeRAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LinhaDeRAM_vlg_sample_tst(
	CLK,
	EN,
	in,
	R/W,
	sampler_tx
);
input  CLK;
input  EN;
input [4:0] in;
input  R/W;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or in or R/W)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LinhaDeRAM_vlg_check_tst (
	out,
	pin_name1,
	sampler_rx
);
input [4:0] out;
input  pin_name1;
input sampler_rx;

reg [4:0] out_expected;
reg  pin_name1_expected;

reg [4:0] out_prev;
reg  pin_name1_prev;

reg [4:0] out_expected_prev;
reg  pin_name1_expected_prev;

reg [4:0] last_out_exp;
reg  last_pin_name1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_prev = out;
	pin_name1_prev = pin_name1;
end

// update expected /o prevs

always @(trigger)
begin
	out_expected_prev = out_expected;
	pin_name1_expected_prev = pin_name1_expected;
end



// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
	out_expected[4] = #999000 1'b0;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
	out_expected[3] = #999000 1'b0;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
	out_expected[2] = #999000 1'b0;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
	out_expected[1] = #999000 1'b0;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
	out_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(out_expected or out or pin_name1_expected or pin_name1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out = %b | expected pin_name1 = %b | ",out_expected_prev,pin_name1_expected_prev);
	$display("| real out = %b | real pin_name1 = %b | ",out_prev,pin_name1_prev);
`endif
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LinhaDeRAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg [4:0] in;
reg R/W;
// wires                                               
wire [4:0] out;
wire pin_name1;

wire sampler;                             

// assign statements (if any)                          
LinhaDeRAM i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.EN(EN),
	.in(in),
	.out(out),
	.pin_name1(pin_name1),
	.\R/W (R/W)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #49000 1'b0;
	CLK = #51000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'bZ;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
	CLK = #50000 1'b0;
	CLK = #50000 1'b1;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #999000 1'b0;
	EN = #201000 1'b1;
end 

// R/W
initial
begin
	R/W = 1'b0;
	R/W = #100000 1'b1;
	R/W = #100000 1'b0;
	R/W = #100000 1'b1;
	R/W = #100000 1'b0;
	R/W = #100000 1'b1;
	R/W = #100000 1'b0;
	R/W = #100000 1'b1;
	R/W = #100000 1'b0;
	R/W = #100000 1'b1;
	R/W = #99000 1'b0;
	R/W = #101000 1'b1;
	R/W = #100000 1'b0;
	R/W = #100000 1'b1;
end 
// in[ 4 ]
initial
begin
	in[4] = 1'b0;
	in[4] = #800000 1'b1;
	in[4] = #199000 1'b0;
end 
// in[ 3 ]
initial
begin
	in[3] = 1'b0;
	in[3] = #600000 1'b1;
	in[3] = #400000 1'b0;
end 
// in[ 2 ]
initial
begin
	in[2] = 1'b0;
	in[2] = #400000 1'b1;
	in[2] = #600000 1'b0;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
	in[1] = #200000 1'b1;
	in[1] = #800000 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b1;
	in[0] = #1000000 1'b0;
end 

LinhaDeRAM_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.in(in),
	.R/W(R/W),
	.sampler_tx(sampler)
);

LinhaDeRAM_vlg_check_tst tb_out(
	.out(out),
	.pin_name1(pin_name1),
	.sampler_rx(sampler)
);
endmodule

